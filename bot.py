import os
import logging
from telegram import Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram import Update
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz
import random
from flask import Flask
from threading import Thread

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health checks
app = Flask(__name__)


@app.route('/')
def home():
    return "ü¶´ –ë–æ–±—Ä-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200


@app.route('/health')
def health():
    return "OK", 200


def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

if not BOT_TOKEN or not CHAT_ID:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
application = Application.builder().token(BOT_TOKEN).build()

# –•—Ä–∞–Ω–∏–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –∑–∞ –¥–µ–Ω—å
last_message_ids = []

# –ö–æ–ª–ª–µ–∫—Ü–∏—è —ç–º–æ–¥–∑–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
MORNING_GREETINGS = [
    "üåÖ –° –±–æ–±—Ä—ã–º —É—Ç—Ä–æ–º!",
    "ü¶´ –° –±–æ–±—Ä—ã–º —É—Ç—Ä–æ–º!",
    "‚òÄÔ∏è –° –±–æ–±—Ä—ã–º —É—Ç—Ä–æ–º!",
    "üåû –° –±–æ–±—Ä—ã–º —É—Ç—Ä–æ–º!",
    "üòä –° –±–æ–±—Ä—ã–º —É—Ç—Ä–æ–º!",
    "üåü –° –±–æ–±—Ä—ã–º —É—Ç—Ä–æ–º!",
    "üí´ –° –±–æ–±—Ä—ã–º —É—Ç—Ä–æ–º!",
    "ü™µ –° –±–æ–±—Ä—ã–º —É—Ç—Ä–æ–º!"
]

OTHER_OPTIONS = [
    "üåà –Ø –≥–µ–π",
    "üé≠ –Ø –ø–∏–¥—Ä",
    "üíÖ –Ø —á–º–æ",
    "‚ú® –Ø —Ö—É–µ—Å–æ—Å",
    "ü¶Ñ –Ø –ø–∏–¥–æ—Ä–∞—Å",
    "üé™ –Ø –∂–µ–Ω—è"
]

FUNNY_DESCRIPTIONS = [
    "–ü—Ä–æ—Å–Ω–∏—Å—å –∏ –ø–æ–π –º–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω–∞ üéµ?",
    "–£—Ç—Ä–æ –¥–æ–±—Ä—ã–º –Ω–µ –±—ã–≤–∞–µ—Ç? üêæ\n–ö–æ–ª—è –Ω–∞—Ö—É–π –ø–æ—Å—ã–ª–∞–µ—Ç",
    "–ó–∞–≤–µ–¥–∏ –º–æ—Ç–æ—Ä—á–∏–∫! üöó\n–ü–æ–¥—Ä–æ—á–∏",
    "–ö–æ—Ñ–µ –≥–æ—Ç–æ–≤? ‚òïÔ∏è\n–ê —Å—Ä–∞—Ç—å?",
    "–ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –ø–æ–±–µ–¥—ã! üèÜ\n–†–µ–≥–Ω–∏ –∫–∞—Ç–∫—É –≤ –∫—Å",
    "–ë–æ–±—Ä—ã —É–∂–µ —Ç—Ä—É–¥—è—Ç—Å—è! ü¶´\n–ê –ø–∏–¥—Ä",
    "–°–æ–ª–Ω—Ü–µ –≤—Å—Ç–∞–µ—Ç üåû\n–ù–∞—Ö—É–π —Ç—ã –≤—Å—Ç–∞–ª?"
]


async def delete_previous_messages():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    global last_message_ids

    if not last_message_ids:
        return

    successful_deletes = 0
    for message_id in last_message_ids:
        try:
            await application.bot.delete_message(chat_id=CHAT_ID, message_id=message_id)
            successful_deletes += 1
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

    logger.info(f"–£–¥–∞–ª–µ–Ω–æ {successful_deletes} –∏–∑ {len(last_message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    last_message_ids = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è


async def create_daily_poll():
    """–°–æ–∑–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    global last_message_ids

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_previous_messages()

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        greeting = random.choice(MORNING_GREETINGS)
        other_option = random.choice(OTHER_OPTIONS)
        description = random.choice(FUNNY_DESCRIPTIONS)

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
        poll_question = f"ü¶´ –î–û–ë–†–û–ï –£–¢–†–û! ü¶´\n\n{description}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø—Ä–æ—Å–æ–º
        welcome_message = await application.bot.send_message(
            chat_id=CHAT_ID,
            text=f"üåÖ *–° –ë–û–ë–†–´–ú –£–¢–†–û–ú, –•–£–ï–°–û–°–´\!* üåÖ\n\n_–ü–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å\!_ ‚ú®\n_–î–∞–≤–∞–π—Ç–µ —É–∑–Ω–∞–µ–º, –∫–∞–∫ –≤—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å\!_ üêæ",
            parse_mode='MarkdownV2'
        )
        last_message_ids.append(welcome_message.message_id)

        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å
        poll_message = await application.bot.send_poll(
            chat_id=CHAT_ID,
            question=poll_question,
            options=[greeting, other_option],
            type="regular",
            is_anonymous=False,
            allows_multiple_answers=False
        )
        last_message_ids.append(poll_message.message_id)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
        final_message = await application.bot.send_message(
            chat_id=CHAT_ID,
            text="üéâ *–û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω\!* \n_–ù–µ –ø—Ä–æ–≥–æ–ª–æ–≤–∞–ª–∏ = –æ—Ç—Å–æ—Å–∞–ª–∏\!_ üí´",
            parse_mode='MarkdownV2'
        )
        last_message_ids.append(final_message.message_id)

        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(last_message_ids)} –Ω–æ–≤—ã—Ö –µ–±–∞–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

    except Exception as e:
        logger.error(f"—è –≤ –∞—Ö—É–µ: {e}")


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –±–æ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —á–∞—Ç–µ
        if str(update.effective_chat.id) != CHAT_ID:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ")
            return

        # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        test_message = await update.message.reply_text(
            "üé™ *—è –∑–∞–µ–±–∞–ª—Å—è\!* \n_–°–µ–∫—É–Ω–¥–æ—á–∫—É\.\.\._ ‚è≥",
            parse_mode='MarkdownV2'
        )

        await create_daily_poll()

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
        try:
            await application.bot.delete_message(chat_id=CHAT_ID, message_id=test_message.message_id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /test: {e}")
        await update.message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞:* {str(e)}", parse_mode='MarkdownV2')


async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
    try:
        if str(update.effective_chat.id) != CHAT_ID:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ")
            return

        clear_message = await update.message.reply_text(
            "üßπ –µ–±–∞—à—É –±—É–∫–≤—ã\.\.\.*",
            parse_mode='MarkdownV2'
        )

        await delete_previous_messages()

        await application.bot.edit_message_text(
            chat_id=CHAT_ID,
            message_id=clear_message.message_id,
            text="‚úÖ *–≤—ã–µ–±–∞–ª –±—É–∫–≤—ã\!*",
            parse_mode='MarkdownV2'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /clear: {e}")
        await update.message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞:* {str(e)}", parse_mode='MarkdownV2')


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

ü¶´ –ë–æ–±—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00 –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É
‚è∞ –°–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å: –∑–∞–≤—Ç—Ä–∞ –≤ 7:00
üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(last_message_ids)}
üéØ –ö–æ–º–∞–Ω–¥—ã:
   /test \- —Ç–æ–ª—å–∫–æ –∫–æ–ª–µ
   /clear \- —É–µ–±–∞—Ç—å –ø–æ –¥–æ–Ω–±–∞—Å—Å—É
   /stats \- –Ω–∞—Ö—É—è?
   /help \- –ø–æ–º–æ—â—å –¥–∞—É–Ω–∞–º

*–î–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π –±–æ–±—Ä\!* ü™µ
        """
        await update.message.reply_text(stats_text, parse_mode='MarkdownV2')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stats: {e}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    try:
        help_text = """
ü¶´ *–ü–æ–º–æ—â—å –ø–æ –±–æ–±—Ä\-–±–æ—Ç—É*

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø—Ä–æ—Å—ã –≤ 7:00 –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É\.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
`/test` \- —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å \(—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤\)
`/clear` \- –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
`/stats` \- –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
`/help` \- —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π\. –ü—Ä–æ—Å—Ç–æ –≥–æ–ª–æ—Å—É–π—Ç–µ –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –¥–µ–Ω—å —Å —É–ª—ã–±–∫–æ–π\! üòä

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ\.
        """
        await update.message.reply_text(help_text, parse_mode='MarkdownV2')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}")


def start_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
    try:
        tz = pytz.timezone('Asia/Yekaterinburg')
        scheduler = BackgroundScheduler()

        # –û—Å–Ω–æ–≤–Ω–æ–π –æ–ø—Ä–æ—Å –≤ 7:00
        scheduler.add_job(
            create_daily_poll,
            trigger=CronTrigger(hour=7, minute=0, timezone=tz)
        )

        scheduler.start()
        logger.info("ü¶´ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω! –û–ø—Ä–æ—Å—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ 7:00 –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("test", test_command))
        application.add_handler(CommandHandler("clear", clear_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("start", help_command))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        start_scheduler()

        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = Thread(target=run_flask)
        flask_thread.daemon = True
        flask_thread.start()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("ü¶´ –ë–æ–±—Ä-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("""
    ü¶´ –ë–û–ë–†-–ëOT –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! ü¶´
    --------------------------
    –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç
    –§—É–Ω–∫—Ü–∏–∏: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –≤ 7:00
    –ö–æ–º–∞–Ω–¥—ã: /test, /clear, /stats, /help
    --------------------------
        """)

        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()